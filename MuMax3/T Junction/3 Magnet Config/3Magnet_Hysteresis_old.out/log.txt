//output directory: C:\Program Files\mumax3.9.1_windows\RunFiles\TJuncStarHysteresisFull_yUp.out/
start := now()
wire_diameter := 100e-9
length_wire := 780e-9
x_trans := cos(30*pi/180)*wire_diameter/2 + wire_diameter/4
y_trans_wire := 750e-9 + length_wire/4 + wire_diameter/4 + 20e-9
wire_cylinder := Cylinder(wire_diameter, length_wire).RotY(-90*pi/180).Transl(0, y_trans_wire, 0)
f := Cuboid(wire_diameter/2, wire_diameter/2, length_wire).Transl(x_trans, y_trans_wire, 0).RotZ(-60 * pi / 180).RotY(-90 * pi / 180)
g := Cuboid(wire_diameter/2, wire_diameter/2, length_wire).Transl(x_trans, y_trans_wire, 0).RotZ(-120 * pi / 180).RotY(-90 * pi / 180)
h := Cuboid(wire_diameter/2, wire_diameter/2, length_wire).Transl(x_trans, y_trans_wire, 0).RotZ(-180 * pi / 180).RotY(-90 * pi / 180)
i := Cuboid(wire_diameter/2, wire_diameter/2, length_wire).Transl(x_trans, y_trans_wire, 0).RotZ(-240 * pi / 180).RotY(-90 * pi / 180)
k := Cuboid(wire_diameter/2, wire_diameter/2, length_wire).Transl(x_trans, y_trans_wire, 0).RotZ(-300 * pi / 180).RotY(-90 * pi / 180)
l := Cuboid(wire_diameter/2, wire_diameter/2, length_wire).Transl(x_trans, y_trans_wire, 0).RotZ(-0 * pi / 180).RotY(-90 * pi / 180)
length_wire_LEG := length_wire / 2
y_trans_wire_LEG := -(wire_diameter/2 + length_wire_LEG/2) + y_trans_wire
wire_LEG_cylinder := Cylinder(wire_diameter, length_wire_LEG).RotX(-90*pi/180).Transl(0, y_trans_wire_LEG, 0)
cutChunk1_LEG := Cuboid(wire_diameter/2, wire_diameter/2, length_wire_LEG).Transl(x_trans, y_trans_wire, 0).RotZ(-30*pi/180).RotX(-90*pi/180).Transl(0, y_trans_wire_LEG, 0)
cutChunk2_LEG := Cuboid(wire_diameter/2, wire_diameter/2, length_wire_LEG).Transl(x_trans, y_trans_wire, 0).RotZ(-90*pi/180).RotX(-90*pi/180).Transl(0, y_trans_wire_LEG, 0)
cutChunk3_LEG := Cuboid(wire_diameter/2, wire_diameter/2, length_wire_LEG).Transl(x_trans, y_trans_wire, 0).RotZ(-150*pi/180).RotX(-90*pi/180).Transl(0, y_trans_wire_LEG, 0)
cutChunk4_LEG := Cuboid(wire_diameter/2, wire_diameter/2, length_wire_LEG).Transl(x_trans, y_trans_wire, 0).RotZ(-210*pi/180).RotX(-90*pi/180).Transl(0, y_trans_wire_LEG, 0)
cutChunk5_LEG := Cuboid(wire_diameter/2, wire_diameter/2, length_wire_LEG).Transl(x_trans, y_trans_wire, 0).RotZ(-270*pi/180).RotX(-90*pi/180).Transl(0, y_trans_wire_LEG, 0)
cutChunk6_LEG := Cuboid(wire_diameter/2, wire_diameter/2, length_wire_LEG).Transl(x_trans, y_trans_wire, 0).RotZ(-330*pi/180).RotX(-90*pi/180).Transl(0, y_trans_wire_LEG, 0)
device_distance := 40e-9
zb := 100e-9
usemag_STAR_condition := 1
size_increase := 1
xb_STAR_L := 1500e-9
yb_STAR_L := size_increase * 130e-9
x_ct_STAR_L := xb_STAR_L/2 + length_wire/2 + device_distance
xb_STAR_R := 1500e-9
yb_STAR_R := size_increase * 230e-9
x_ct_STAR_R := xb_STAR_R/2 + length_wire/2 + device_distance
xb_STAR_LEG := size_increase * 130e-9
yb_STAR_LEG := 1500e-9
y_ct_STAR_LEG := yb_STAR_LEG/2 + length_wire/2 + wire_diameter/2 + device_distance
mag13 := Cuboid(xb_STAR_L, yb_STAR_L, zb).Transl(-x_ct_STAR_L, y_trans_wire, 0)
mag14 := Cuboid(xb_STAR_R, yb_STAR_R, zb).Transl(x_ct_STAR_R, y_trans_wire, 0)
mag15 := Cuboid(xb_STAR_LEG, yb_STAR_LEG, zb).Transl(0, -y_ct_STAR_LEG+y_trans_wire, 0)
usemag_TRIANGLE_condition := 0
extra_dsitannce_forSmall_Magents := 0
xb_middle := size_increase * 200e-9
yb_middle := 1500e-9
x_ct_middle := 0
y_ct_middle := yb_middle/2 + wire_diameter/2 + device_distance + extra_dsitannce_forSmall_Magents
mag16 := Cuboid(xb_middle, yb_middle, zb).Transl(x_ct_middle, y_ct_middle, 0)
xb_ang := size_increase * 150e-9
yb_ang := 1400e-9
ang_rot1 := 45
x_ct_ang := extra_dsitannce_forSmall_Magents + sin(ang_rot1*pi/180)*(yb_ang/2) + cos(ang_rot1*pi/180)*xb_ang/2 + wire_diameter/2 + device_distance
y_ct_ang := extra_dsitannce_forSmall_Magents + cos(ang_rot1*pi/180)*(yb_ang/2) + sin(ang_rot1*pi/180)*xb_ang/2 + wire_diameter/2 + device_distance
mag17 := Cuboid(xb_ang, yb_ang, zb).RotZ(-ang_rot1*pi/180).Transl(-x_ct_ang, -y_ct_ang, 0)
mag18 := Cuboid(xb_ang, yb_ang, zb).RotZ(ang_rot1*pi/180).Transl(x_ct_ang, -y_ct_ang, 0)
extra_simBox_width_mags_x := max(xb_STAR_R, xb_STAR_L)
extra_simBox_width_mags_y := yb_STAR_LEG
Grid_X := 2 * (length_wire/2 + extra_simBox_width_mags_x + device_distance)
N_x := 512
cellsize_x := Grid_X / N_x
print(Grid_X)
//3.86e-06
print(cellsize_x)
//7.5390625e-09
Grid_Y := 30e-9 + (2*(length_wire/2+extra_simBox_width_mags_y+wire_diameter/2+device_distance))/2 + max(yb_STAR_R, yb_STAR_L)
N_y := 256
cellsize_y := Grid_Y / N_Y
print(Grid_Y)
//2.24e-06
print(cellsize_y)
//8.75e-09
Grid_Z := wire_diameter
N_z := 16
cellsize_z := Grid_Z / N_z
print(cellsize_z)
//6.25e-09
SetGridsize(N_x, N_y, N_z)
SetCellsize(cellsize_x, cellsize_y, cellsize_z)
if usemag_STAR_condition == 1 {
	SetGeom(wire_cylinder.sub(f).sub(g).sub(h).sub(i).sub(k).sub(l).add(wire_LEG_cylinder).sub(cutChunk1_LEG).sub(cutChunk2_LEG).sub(cutChunk3_LEG).sub(cutChunk4_LEG).sub(cutChunk5_LEG).sub(cutChunk6_LEG).add(mag13).add(mag14).add(mag15))
	if usemag_TRIANGLE_condition == 1 {
		SetGeom(wire_cylinder.sub(f).sub(g).sub(h).sub(i).sub(k).sub(l).add(wire_LEG_cylinder).sub(cutChunk1_LEG).sub(cutChunk2_LEG).sub(cutChunk3_LEG).sub(cutChunk4_LEG).sub(cutChunk5_LEG).sub(cutChunk6_LEG).add(mag13).add(mag14).add(mag15).add(mag16).add(mag17).add(mag18))
	}
}
saveas(geom, "SetUp")
Msat_val := 1.44e6
Aex_magnets_value := 3.0e-11
K1_anisotropy_constant := 4.5e5
K2_anisotropy_constant := 1.5e5
damping_constant := 0.01
External_Field_vector := vector(0, 0, 0)
mag_region_number13 := 0
mag_region_number14 := 0
mag_region_number15 := 0
if usemag_STAR_condition == 1 {
	mag_region_number13 = 32
	DefRegion(mag_region_number13, mag13)
	m.SetRegion(mag_region_number13, randomMag())
	Msat.SetRegion(mag_region_number13, Msat_val)
	Aex.SetRegion(mag_region_number13, Aex_magnets_value)
	anisU.SetRegion(mag_region_number13, vector(-1, 0, 0))
	Ku1.SetRegion(mag_region_number13, K1_anisotropy_constant)
	Ku2.SetRegion(mag_region_number13, K2_anisotropy_constant)
	alpha.SetRegion(mag_region_number13, damping_constant)
	mag_region_number14 = 33
	DefRegion(mag_region_number14, mag14)
	m.SetRegion(mag_region_number14, randomMag())
	Msat.SetRegion(mag_region_number14, Msat_val)
	Aex.SetRegion(mag_region_number14, Aex_magnets_value)
	anisU.SetRegion(mag_region_number14, vector(1, 0, 0))
	Ku1.SetRegion(mag_region_number14, K1_anisotropy_constant)
	Ku2.SetRegion(mag_region_number14, K2_anisotropy_constant)
	alpha.SetRegion(mag_region_number14, damping_constant)
	mag_region_number15 = 34
	DefRegion(mag_region_number15, mag15)
	m.SetRegion(mag_region_number15, randomMag())
	Msat.SetRegion(mag_region_number15, Msat_val)
	Aex.SetRegion(mag_region_number15, Aex_magnets_value)
	anisU.SetRegion(mag_region_number15, vector(0, -1, 0))
	Ku1.SetRegion(mag_region_number15, K1_anisotropy_constant)
	Ku2.SetRegion(mag_region_number15, K2_anisotropy_constant)
	alpha.SetRegion(mag_region_number15, damping_constant)
	if usemag_TRIANGLE_condition == 1 {
		x_component := sin(ang_rot1 * pi / 180)
		y_component := cos(ang_rot1 * pi / 180)
		UUU := 0
		UUD := 0
		DUD := 0
		DDD := 0
		DDU := 0
		UDU := 0
		DUU := 0
		UDD := 0
		Middle_mag_intitial_magnetization := Uniform(0, 0, 0)
		DownLeft_mag_intitial_magnetization := Uniform(0, 0, 0)
		DownRight_mag_intitial_magnetization := Uniform(0, 0, 0)
		ang_rot_Bext := 45
		mag_Bext := 0.15
		if UUU == 1 {
			Middle_mag_intitial_magnetization = Uniform(0, 1, 0)
			DownLeft_mag_intitial_magnetization = Uniform(x_component, y_component, 0)
			DownRight_mag_intitial_magnetization = Uniform(-x_component, y_component, 0)
			External_Field_vector = vector(mag_Bext, 0, 0)
		}
		if UUD == 1 {
			Middle_mag_intitial_magnetization = Uniform(0, 1, 0)
			DownLeft_mag_intitial_magnetization = Uniform(x_component, y_component, 0)
			DownRight_mag_intitial_magnetization = Uniform(x_component, -y_component, 0)
			External_Field_vector = vector(0, -mag_Bext, 0)
		}
		if DUD == 1 {
			Middle_mag_intitial_magnetization = Uniform(0, -1, 0)
			DownLeft_mag_intitial_magnetization = Uniform(x_component, y_component, 0)
			DownRight_mag_intitial_magnetization = Uniform(x_component, -y_component, 0)
			External_Field_vector = vector(0, 0, 0)
		}
		if DDD == 1 {
			Middle_mag_intitial_magnetization = Uniform(0, -1, 0)
			DownLeft_mag_intitial_magnetization = Uniform(-x_component, -y_component, 0)
			DownRight_mag_intitial_magnetization = Uniform(x_component, -y_component, 0)
			External_Field_vector = vector(0, -mag_Bext, 0)
		}
		if DDU == 1 {
			Middle_mag_intitial_magnetization = Uniform(0, -1, 0)
			DownLeft_mag_intitial_magnetization = Uniform(-x_component, -y_component, 0)
			DownRight_mag_intitial_magnetization = Uniform(-x_component, y_component, 0)
		}
		if UDU == 1 {
			Middle_mag_intitial_magnetization = Uniform(0, 1, 0)
			DownLeft_mag_intitial_magnetization = Uniform(-x_component, -y_component, 0)
			DownRight_mag_intitial_magnetization = Uniform(-x_component, y_component, 0)
			External_Field_vector = vector(-mag_Bext*sin(ang_rot_Bext*pi/180), -mag_Bext*cos(ang_rot_Bext*pi/180), 0)
		}
		if DUU == 1 {
			Middle_mag_intitial_magnetization = Uniform(0, -1, 0)
			DownLeft_mag_intitial_magnetization = Uniform(x_component, y_component, 0)
			DownRight_mag_intitial_magnetization = Uniform(-x_component, y_component, 0)
		}
		if UDD == 1 {
			Middle_mag_intitial_magnetization = Uniform(0, 1, 0)
			DownLeft_mag_intitial_magnetization = Uniform(-x_component, -y_component, 0)
			DownRight_mag_intitial_magnetization = Uniform(x_component, -y_component, 0)
			External_Field_vector = vector(mag_Bext*sin(ang_rot_Bext*pi/180), -mag_Bext*cos(ang_rot_Bext*pi/180), 0)
		}
		mag_region_number16 := 35
		DefRegion(mag_region_number16, mag16)
		m.SetRegion(mag_region_number16, Middle_mag_intitial_magnetization)
		Msat.SetRegion(mag_region_number16, Msat_val)
		Aex.SetRegion(mag_region_number16, Aex_magnets_value)
		anisU.SetRegion(mag_region_number16, vector(0, 1, 0))
		Ku1.SetRegion(mag_region_number16, K1_anisotropy_constant)
		Ku2.SetRegion(mag_region_number16, K2_anisotropy_constant)
		alpha.SetRegion(mag_region_number16, damping_constant)
		mag_region_number17 := 36
		DefRegion(mag_region_number17, mag17)
		m.SetRegion(mag_region_number17, DownLeft_mag_intitial_magnetization)
		Msat.SetRegion(mag_region_number17, Msat_val)
		Aex.SetRegion(mag_region_number17, Aex_magnets_value)
		anisU.SetRegion(mag_region_number17, vector(1/sqrt(2), 1/sqrt(2), 0))
		Ku1.SetRegion(mag_region_number17, K1_anisotropy_constant)
		Ku2.SetRegion(mag_region_number17, K2_anisotropy_constant)
		alpha.SetRegion(mag_region_number17, damping_constant)
		mag_region_number18 := 37
		DefRegion(mag_region_number18, mag18)
		m.SetRegion(mag_region_number18, DownRight_mag_intitial_magnetization)
		Msat.SetRegion(mag_region_number18, Msat_val)
		Aex.SetRegion(mag_region_number18, Aex_magnets_value)
		anisU.SetRegion(mag_region_number18, vector(-1/sqrt(2), 1/sqrt(2), 0))
		Ku1.SetRegion(mag_region_number18, K1_anisotropy_constant)
		Ku2.SetRegion(mag_region_number18, K2_anisotropy_constant)
		alpha.SetRegion(mag_region_number18, damping_constant)
	}
}
saveas(regions, "Magnets")
saveas(anisU, "region_Uniaxial_anisotropy_direction")
region_number_WIRE_TOP := 2
DefRegion(region_number_WIRE_TOP, wire_cylinder.sub(f).sub(g).sub(h).sub(i).sub(k).sub(l))
m.SetRegion(region_number_WIRE_TOP, Uniform(0, 0, 0))
Msat.SetRegion(region_number_WIRE_TOP, 0)
Aex.SetRegion(region_number_WIRE_TOP, 0)
anisU.SetRegion(region_number_WIRE_TOP, vector(0, 0, 0))
Ku1.SetRegion(region_number_WIRE_TOP, 0)
Ku2.SetRegion(region_number_WIRE_TOP, 0)
region_number_WIRE_LEG := 3
DefRegion(region_number_WIRE_LEG, wire_LEG_cylinder.sub(cutChunk1_LEG).sub(cutChunk2_LEG).sub(cutChunk3_LEG).sub(cutChunk4_LEG).sub(cutChunk5_LEG).sub(cutChunk6_LEG))
m.SetRegion(region_number_WIRE_LEG, Uniform(0, 0, 0))
Msat.SetRegion(region_number_WIRE_LEG, 0)
Aex.SetRegion(region_number_WIRE_LEG, 0)
anisU.SetRegion(region_number_WIRE_LEG, vector(0, 0, 0))
Ku1.SetRegion(region_number_WIRE_LEG, 0)
Ku2.SetRegion(region_number_WIRE_LEG, 0)
saveas(m, "Initial_magnetization")
relax_condition := 1
if relax_condition == 1 {
	relax()
	saveas(m, "Initial_Relaxed_magnetization")
}
count_min := 0e-9
count_max := length_wire
step_x := count_min
step_y := wire_diameter
counter := 0
TableAdd(m.Region(mag_region_number13))
TableAdd(m.Region(mag_region_number14))
TableAdd(m.Region(mag_region_number15))
TableAdd(B_ext)
TableAdd(B_eff.Region(6))
TableAdd(B_eff.Region(9))
TableAddVar(step_x, "step_x", "No unit")
TableAddVar(step_y, "step_y", "No unit")
often_save := 8
Bmax_strong := 500.0e-3
Bstep_strong := 10e-3
Bmax_win := 380.0e-3
Bstep_win := 3.0e-3
Bmax_additional_field := 230.0e-3
MinimizerStop = 1e-6
counter222 := 0
HysteresisX_condition := 1
if HysteresisX_condition == 1 {
	BextY_Sweep_condition := 1
	if BextY_Sweep_condition == 1 {
		counter222 = 0
		for B := 0.0; B >= -Bmax_strong; B -= Bstep_strong {
			B_ext = vector(0, B, 0)
			if relax_condition == 1 {
				minimize()
			}
			tablesave()
			counter222 = counter222 + 1
			save_condition := remainder(counter222, often_save)
			if save_condition == 0 {
				save(m)
				print(100 * counter222 / (Bmax_win / (Bstep_win)))
			}
		}
		print("B window y direction sweep step 1 complete (At y -ve window)")
		counter222 = 0
		for B := -Bmax_strong; B <= 0.0; B += Bstep_strong {
			B_ext = vector(0, B, 0)
			if relax_condition == 1 {
				minimize()
			}
			tablesave()
			counter222 = counter222 + 1
			save_condition := remainder(counter222, often_save)
			if save_condition == 0 {
				save(m)
				print(100 * counter222 / (Bmax_win / (Bstep_win)))
			}
		}
		print("B window y direction sweep step 2 complete. At zero field")
	}
	counter222 = 0
	for B := 0.0; B >= -Bmax_strong; B -= Bstep_strong {
		B_ext = vector(B, 0, 0)
		if relax_condition == 1 {
			minimize()
		}
		tablesave()
		counter222 = counter222 + 1
		save_condition := remainder(counter222, often_save)
		if save_condition == 0 {
			save(m)
		}
		print(100 * B / Bmax_strong)
	}
	print("Strong sweep step 1 complete (at -ve x Bmax_strong)")
	counter222 = 0
	for B := -Bmax_strong; B <= 0.0; B += Bstep_strong {
		B_ext = vector(B, 0, 0)
		if relax_condition == 1 {
			minimize()
		}
		tablesave()
		counter222 = counter222 + 1
		save_condition := remainder(counter222, often_save)
		if save_condition == 0 {
			save(m)
		}
	}
	print("Strong sweep step 2 complete (at -ve x Bmax_win). Start window sweep from 0.")
	counter222 = 0
	for B := 0.0; B <= Bmax_win; B += Bstep_win {
		B_ext = vector(B, 0, 0)
		if relax_condition == 1 {
			minimize()
		}
		tablesave()
		counter222 = counter222 + 1
		save_condition := remainder(counter222, often_save)
		if save_condition == 0 {
			save(m)
			print(100 * counter222 / (2 * Bmax_win / (Bstep_win)))
		}
	}
	print("B window sweep step 1 complete (at +veBmax_win).")
	counter222 = 0
	for B := Bmax_win; B >= 0.0; B -= Bstep_win {
		B_ext = vector(B, 0, 0)
		if relax_condition == 1 {
			minimize()
		}
		tablesave()
		counter222 = counter222 + 1
		save_condition := remainder(counter222, often_save)
		if save_condition == 0 {
			save(m)
			print(100 * counter222 / (Bmax_win / (Bstep_win)))
		}
	}
	BextX_FullSweep_condition := 0
	if BextX_FullSweep_condition == 1 {
		print("B window sweep step 2 complete (x at -veBmax_win).")
		counter222 = 0
		for B := -Bmax_win; B <= 0; B += Bstep_win {
			B_ext = vector(B, 0, 0)
			if relax_condition == 1 {
				minimize()
			}
			tablesave()
			counter222 = counter222 + 1
			save_condition := remainder(counter222, often_save)
			if save_condition == 0 {
				save(m)
				print(100 * counter222 / (2 * Bmax_win / (Bstep_win)))
			}
		}
		print("B window sweep step 3 complete. (At 0 x field).")
	}
	Beff_additional_field_condition := 1
	if Beff_additional_field_condition == 1 {
		counter222 = 0
		for B := 0.0; B <= Bmax_additional_field; B += Bstep_win {
			B_ext = vector(0, B, 0)
			if relax_condition == 1 {
				minimize()
			}
			tablesave()
			counter222 = counter222 + 1
			save_condition := remainder(counter222, often_save)
			if save_condition == 0 {
				save(m)
				print(100 * counter222 / (2 * Bmax_win / (Bstep_win)))
			}
		}
		print("Adding on additonal field (at Beff_additional_field).")
	}
}
//6.315789473684211
//12.631578947368421
//18.94736842105263
//25.263157894736842
//31.57894736842105
//37.89473684210526
//B window y direction sweep step 1 complete (At y -ve window)
//6.315789473684211
//12.631578947368421
//18.94736842105263
//25.263157894736842
//31.57894736842105
//37.89473684210526
//B window y direction sweep step 2 complete. At zero field
//0
//-2
//-4
//-6
//-8
//-10
//-12.000000000000002
//-14.000000000000002
//-16
//-18
//-20
//-21.999999999999996
//-23.999999999999996
//-25.999999999999996
//-27.999999999999996
//-30
//-32
//-34
//-36.00000000000001
//-38.00000000000001
//-40.00000000000001
//-42.00000000000001
//-44.000000000000014
//-46.000000000000014
//-48.000000000000014
//-50.000000000000014
//-52.000000000000014
//-54.000000000000014
//-56.000000000000014
//-58.00000000000002
//-60.00000000000002
//-62.00000000000002
//-64.00000000000003
//-66.00000000000003
//-68.00000000000003
//-70.00000000000003
//-72.00000000000003
//-74.00000000000003
//-76.00000000000003
//-78.00000000000004
//-80.00000000000004
//-82.00000000000004
//-84.00000000000004
//-86.00000000000004
//-88.00000000000004
//-90.00000000000004
//-92.00000000000004
//-94.00000000000006
//-96.00000000000006
//-98.00000000000006
//Strong sweep step 1 complete (at -ve x Bmax_strong)
//Strong sweep step 2 complete (at -ve x Bmax_win). Start window sweep from 0.
//3.1578947368421053
//6.315789473684211
//9.473684210526315
//12.631578947368421
//15.789473684210526
//18.94736842105263
//22.105263157894736
//25.263157894736842
//28.421052631578945
//31.57894736842105
//34.73684210526316
//37.89473684210526
//41.05263157894737
//44.21052631578947
//47.368421052631575
//B window sweep step 1 complete (at +veBmax_win).
//6.315789473684211
//12.631578947368421
//18.94736842105263
//25.263157894736842
//31.57894736842105
//37.89473684210526
//44.21052631578947
//50.526315789473685
//56.84210526315789
//63.1578947368421
//69.47368421052632
//75.78947368421052
//82.10526315789474
//88.42105263157895
//94.73684210526315
//3.1578947368421053
//6.315789473684211
//9.473684210526315
//12.631578947368421
//15.789473684210526
//18.94736842105263
//22.105263157894736
//25.263157894736842
//28.421052631578945
//Adding on additonal field (at Beff_additional_field).
xmin := -length_wire / 2
xmax := length_wire / 2
points_TOP_wire := Ceil(length_wire / cellsize_x)
print(points_TOP_wire)
//104
size_stepAndChunk_x := length_wire / Ceil(length_wire/cellsize_x)
print(size_stepAndChunk_x)
//7.500000000000001e-09
for zzz := 0; zzz <= (points_TOP_wire - 1); zzz++ {
	step_x = size_stepAndChunk_x * zzz
	counter = counter + 1
	length_left_part := step_x
	length_right_part := length_wire - step_x - size_stepAndChunk_x
	x_trans_left_part := xmin + step_x/2
	x_trans_right_part := step_x/2 + size_stepAndChunk_x/2
	x_trans_cross_section := xmin + step_x + size_stepAndChunk_x/2
	c := Cylinder(wire_diameter, length_left_part).RotY(-90*pi/180).Transl(x_trans_left_part, y_trans_wire, 0)
	d := Cylinder(wire_diameter, length_right_part).RotY(-90*pi/180).Transl(x_trans_right_part, y_trans_wire, 0)
	cross_section := Cylinder(wire_diameter, size_stepAndChunk_x).RotY(-90*pi/180).Transl(x_trans_cross_section, y_trans_wire, 0)
	DefRegion(4, c.sub(f).sub(g).sub(h).sub(i).sub(k).sub(l))
	DefRegion(5, d.sub(f).sub(g).sub(h).sub(i).sub(k).sub(l))
	DefRegion(6, cross_section.sub(f).sub(g).sub(h).sub(i).sub(k).sub(l))
	save_condition := remainder(counter, 5)
	if save_condition == 0 {
	}
	tablesave()
	print(counter)
}
//1
//2
//3
//4
//5
//6
//7
//8
//9
//10
//11
//12
//13
//14
//15
//16
//17
//18
//19
//20
//21
//22
//23
//24
//25
//26
//27
//28
//29
//30
//31
//32
//33
//34
//35
//36
//37
//38
//39
//40
//41
//42
//43
//44
//45
//46
//47
//48
//49
//50
//51
//52
//53
//54
//55
//56
//57
//58
//59
//60
//61
//62
//63
//64
//65
//66
//67
//68
//69
//70
//71
//72
//73
//74
//75
//76
//77
//78
//79
//80
//81
//82
//83
//84
//85
//86
//87
//88
//89
//90
//91
//92
//93
//94
//95
//96
//97
//98
//99
//100
//101
//102
//103
//104
counter = 0
ymin_LEG := wire_diameter / 2
points_LEG_wire := Ceil(length_wire_LEG / cellsize_y)
print(points_LEG_wire)
//45
print(length_wire_LEG)
//3.9e-07
print(cellsize_y)
//8.75e-09
size_stepAndChunk_y := length_wire_LEG / Ceil(length_wire_LEG/cellsize_y)
for yyy := 0; yyy <= (points_LEG_wire - 1); yyy++ {
	step_y = ymin_LEG + size_stepAndChunk_y*yyy
	counter = counter + 1
	length_up_part := step_y - ymin_LEG
	length_down_part := length_wire_LEG - step_y
	y_trans_up_part := -ymin_LEG - size_stepAndChunk_y*yyy/2 + y_trans_wire
	y_trans_down_part := -length_wire_LEG/2 - step_y/2 - ymin_LEG + y_trans_wire
	y_trans_cross_section := -ymin_LEG - step_y/2 - size_stepAndChunk_y*yyy/2 + y_trans_wire
	demag_region_up_LEG := Cylinder(wire_diameter, length_up_part).RotX(-90*pi/180).Transl(0, y_trans_up_part, 0)
	demag_region_down_LEG := Cylinder(wire_diameter, length_down_part).RotX(-90*pi/180).Transl(0, y_trans_down_part, 0)
	cross_section_LEG := Cylinder(wire_diameter, size_stepAndChunk_y).RotX(-90*pi/180).Transl(0, y_trans_cross_section, 0)
	DefRegion(7, demag_region_up_LEG.sub(cutChunk2_LEG).sub(cutChunk3_LEG).sub(cutChunk4_LEG).sub(cutChunk5_LEG).sub(cutChunk6_LEG))
	DefRegion(8, demag_region_down_LEG.sub(cutChunk2_LEG).sub(cutChunk3_LEG).sub(cutChunk4_LEG).sub(cutChunk5_LEG).sub(cutChunk6_LEG))
	DefRegion(9, cross_section_LEG.sub(f).sub(cutChunk2_LEG).sub(cutChunk3_LEG).sub(cutChunk4_LEG).sub(cutChunk5_LEG).sub(cutChunk6_LEG))
	save_condition := remainder(counter, 5)
	if save_condition == 0 {
	}
	tablesave()
	print(counter)
}
//1
//2
//3
//4
//5
//6
//7
//8
//9
//10
//11
//12
//13
//14
//15
//16
//17
//18
//19
//20
//21
//22
//23
//24
//25
//26
//27
//28
//29
//30
//31
//32
//33
//34
//35
//36
//37
//38
//39
//40
//41
//42
//43
//44
//45
HysteresisY_condition := 0
if HysteresisY_condition == 1 {
	counter222 := 0
	for B := 0.0; B <= Bmax_strong; B += Bstep_strong {
		B_ext = vector(B, 0, 0)
		minimize()
		tablesave()
		counter222 = counter222 + 1
		save_condition := remainder(counter222, often_save)
		if save_condition == 0 {
			save(m)
		}
		print(100 * B / Bmax_strong)
	}
	print("Strong sweep step 1 complete")
	counter222 = 0
	for B := Bmax_strong; B >= Bmax_win; B -= Bstep_strong {
		B_ext = vector(B, 0, 0)
		minimize()
		tablesave()
		counter222 = counter222 + 1
		save_condition := remainder(counter222, often_save)
		if save_condition == 0 {
			save(m)
		}
	}
	print("Strong sweep step 2 complete")
	counter222 = 0
	for B := Bmax_win; B >= 0; B -= Bstep_win {
		B_ext = vector(B, 0, 0)
		minimize()
		tablesave()
		counter222 = counter222 + 1
		save_condition := remainder(counter222, often_save)
		if save_condition == 0 {
			save(m)
			print(100 * counter222 / (2 * Bmax_win / (Bstep_win)))
		}
	}
	print("B window sweep step 1 complete")
	counter222 = 0
	for B := 0; B >= Bmax_win; B += Bstep_win {
		B_ext = vector(0, B, 0)
		minimize()
		tablesave()
		counter222 = counter222 + 1
		save_condition := remainder(counter222, often_save)
		if save_condition == 0 {
			save(m)
			print(100 * counter222 / (Bmax_win / (Bstep_win)))
		}
	}
	print("B window y direction sweep step 1 complete")
	counter222 = 0
	for B := Bmax_win; B >= 0; B += -Bstep_win {
		B_ext = vector(0, B, 0)
		minimize()
		tablesave()
		counter222 = counter222 + 1
		save_condition := remainder(counter222, often_save)
		if save_condition == 0 {
			save(m)
			print(100 * counter222 / (Bmax_win / (Bstep_win)))
		}
	}
	print("B window y direction sweep step 2 complete")
}
Time_elapsed := since(start).Seconds()
print("Running time of", Floor(Time_elapsed/60), "minutes and ", remainder(Time_elapsed, 60), "seconds")
//Running time of 67 minutes and  -6.345952000000125 seconds
print(cellsize_x)
//7.5390625e-09
print(cellsize_y)
//8.75e-09
print(cellsize_z)
//6.25e-09
