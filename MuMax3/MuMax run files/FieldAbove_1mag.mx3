//Malcolm Jardie - 08_20 - Mumax3 code to run micromagentic simulations on a single magnet. This performs an accuarate as possible
// simulation in terms of cell size. Typical exchange length of materials is the order of 2-10 nanometers, which is around what this
// code can do. This is for a lone single magnet, so affects of other magnets are not conisdered when performing hysteresis.
// This simualates the hysteresis cycle and then gives the stray field at a distance above the magnet in a 2D array
// Now there is lots of other code here that isnt used for this.



start := now() //starting timer


//////////////////////////////////// CREATING WIRE'S SHAPES ////////////////////////////////////%%%%%%%%

//Dimensions of wire
wire_diameter := 100e-9		 //how thick the wire is across diagonnal
length_wire := 780e-9 //defining the wire

					////////////////////////// TOP WIRE ///////////////////////////					
//Shapes to create a hexagon out of a cylinder
x_trans := cos(30*pi/180)*wire_diameter/2+wire_diameter/4 	//To make sure that sides of cuboids are attached to side of hexagon. I.e. edge of cuboid removed is on circle, not center
y_trans_wire := 0//	 										//y-space between center of magnet and center of nanowire.


					////////////////////////// LEG WIRE ///////////////////////////////	

length_wire_LEG := length_wire/2 // should only be half the length of the top section (bit longer casue will strat from width/2 out)
y_trans_wire_LEG := -(wire_diameter/2 + length_wire_LEG/2) //as starts in middle of simulation box
//y_trans_wire_LEG := 1400e-9

// define cylinder, rotate arounnd x-axis, then shift down. For cuts: deifine cuboid, push out in x-axis, rotate arounf z (so flat end is facing up/down, then rotate and shift to be in line with cylinder
wire_LEG_cylinder :=  Cylinder(wire_diameter, length_wire_LEG).RotX(-90*pi/180).Transl(0,y_trans_wire_LEG,0) // whole cylider of wire to be relaxed over
//Taking chunks out of initial wire cylider, by rotating cuboids to cut out 6 pieces of cylider to make hexagon
//cutChunk1_LEG := Cuboid(wire_diameter/2, wire_diameter/2, length_wire_LEG).Transl(x_trans, y_trans_wire, 0).RotZ(-30 *pi/180).RotX(-90*pi/180).Transl(0, y_trans_wire_LEG, 0)

//////////////////////////////////// MAGNETS dimensions and position ////////////////////////////////////%%%%%%%%

device_distance := 50e-9 		     //small distance wire is from magnet
zb := 100e-9       // this is height of magents

///////////////////////////////////////////// STAR MAGNETS
usemag_STAR_condition := 1 //1 for yes using leg magnets. Only changes SetGeom

size_increase := 1

// This is magnet that is simulated
	xb := 230e-9
	yb := 1000e-9
	x_ct_STAR_L := 0//xb_STAR_L/2 + length_wire/2 + device_distance
	distance_above := 0 //-50e-9 - zb/2 // device dsitance is startig with top of magnet at z=0 as zb/2.

	

	mag13 := Cuboid(xb, yb, zb).rotz(0*pi/180).Transl(0, 000e-9, distance_above)
	mag14 := Cuboid(0, 0, 0).Transl(300e-9, 0, distance_above).rotz(0*pi/180)



//////////////////////////////////// SIMULATION BOX DIMESIONS AND PARTITIONING ////////////////////////////////////%%%%%%%%
// The size of the simulation box depends on the size of the magnets


extra_simBox_width_mags_y := yb // this is the extar width the sim box size needs to be due to things like magnets in the y direction


//want number of # grid points to define cell size for compuational speed. Power of 2 is best

Grid_X 	 	:= xb + 200e-9 //2*(length_wire/2 + extra_simBox_width_mags_x + device_distance)			//length of x direction (wire + magnets)
//N_x			:= 124
N_x			:= 128				//number of chunks Grid_X direction is split up into
cellsize_x  := Grid_X/N_x 			//THIS is size of x direction chunks
print(cellsize_x)

Grid_Y 	 	:= yb + 300e-9 //max(yb_STAR_R, yb_STAR_L) //length_wire //+ 2*(extra_simBox_width_mags_y + wire_diameter + device_distance)	 //actual length y direction needs to be. 2 long magnet lengths + wire width + extra distance. wire_length isnt multiplied by 2 as 
//N_y := 512			
N_y := 256 
cellsize_y := Grid_Y/N_Y				//y cell size
print(cellsize_y)

Grid_Z 	 	:= 1*zb + 0*device_distance + 10e-9 // width is width of magnet, 2*device_distance above as not centered, + some extra for width of measure_volume
//N_z := 32
N_z := 16						// 
cellsize_z := Grid_Z/N_z				//z cell size
print(cellsize_z)

SetGridsize(N_x, N_y, N_z)
SetCellsize(cellsize_x, cellsize_y, cellsize_z)

//////////////////////////////////// SETTING GEOMETRY ////////////////////////////////////%%%%%%%%
//// This is where we chose what magnets will be used in the simulation by "add()" them in
// NOTE: Dont add magenets first, this means that if there is any overlap between the part of the wire we delete, this will delete the magnets as well.  
        
		
	
			SetGeom(mag13) //Just STAR magnets

		
		saveas(geom, "SetUp")


//////////////////////////////////// set ferromagnets REGION properties ////////////////////////////////////%%%%%%%%
				/////////////////////////// Magnets ///////////////////

	
	/////// Magent Parameters ///////////
	
	// saturation value (maximum magnetization with applied field - [A/m]) 
	Msat_val := 1.44e6 // Cobalt
	//Msat_val := 1.75e6 // Iron
	
	//exchange_stiffness (explantion - [J/m])
	Aex_magnets_value := 3.0e-11 //Cobalt
	//Aex_magnets_value := 2.1e-11 //Iron    
	
	//Anisotropy constants (a measure of how different the longitudinal magnetization is to the transverse mag compared to the crystals prefered axes - [J/m^3])
	// cubic and hexagonal crytals (Fe and Cobalt) materials have two values
	K1_anisotropy_constant := 4.5e5 //Cobalt
	//K1_anisotropy_constant := 4.7e4 //Iron   
	K2_anisotropy_constant := 1.5e5 //Cobalt
	//K2_anisotropy_constant := 2.0e4 //Iron
	
	//Landau-Lifshitz damping constant - alpha (reveals the dissipation speed in the ferromagnetic material - [no unit])
	//damping_constant := 0.01 //Cobalt
	damping_constant := 0.01 //Iron   can be 0.1 to 0.01 for Fe, Co, Ni metals or alloys
	
		//////////////////////////////////////
		
		External_Field_vector := vector(0, 0, 0) // initializing external magnetic field to be zero
		mag_region_number13 := 0 // initializing
		mag_region_number14 := 0 // initializing

	mag_region_number1 := 0 // initializing
	mag_region_number2 := 0 // initializing
	
		mag_region_number1_magnetization  := randomMag()
	mag_region_number2_magnetization  := randomMag()
	
	
		mag_region_number1_anisUVector :=  vector(0, 1, 0)
	mag_region_number2_anisUVector :=  vector(-1,0, 0)
	
		
	setInitialMagnetization_condition :=1
	if setInitialMagnetization_condition == 1 { //dont use random initial magnetization and manually set it
	
		mag_region_number1_magnetization  = Uniform(0, 1, 0)
		mag_region_number2_magnetization  = Uniform(0, 0, 0)

	}
	
		

////////////////////////////////////////////////////////////////////////////////////////// Current magnets
	
				mag_region_number1 = 1
		DefRegion(mag_region_number1, mag13)
        m.SetRegion(mag_region_number1, mag_region_number1_magnetization)
        Msat.SetRegion(mag_region_number1, Msat_val)
        Aex.SetRegion(mag_region_number1, Aex_magnets_value)
        anisU.SetRegion(mag_region_number1, mag_region_number1_anisUVector)
        Ku1.SetRegion(mag_region_number1, K1_anisotropy_constant)
        Ku2.SetRegion(mag_region_number1, K2_anisotropy_constant)
        alpha.SetRegion(mag_region_number1, damping_constant)
		

					mag_region_number2 = 2
		DefRegion(mag_region_number2, mag14)
        m.SetRegion(mag_region_number2, mag_region_number2_magnetization)
        Msat.SetRegion(mag_region_number2, Msat_val)
        Aex.SetRegion(mag_region_number2, Aex_magnets_value)
        anisU.SetRegion(mag_region_number2, mag_region_number2_anisUVector)
        Ku1.SetRegion(mag_region_number2, K1_anisotropy_constant)
        Ku2.SetRegion(mag_region_number2, K2_anisotropy_constant)
        alpha.SetRegion(mag_region_number2, damping_constant)	
	
saveas(m, "Initial_magnetization")
saveas(regions, "Magnets") //save only magent regions
saveas(anisU, "region_Uniaxial_anisotropy_direction") //save Uniaxial anisotropy directions of magnets



//////////////////////////////////// RELAX ////////////////////////////////////

print(cellsize_x)
print(cellsize_y)
print(cellsize_z)


	relax_condition := 0 // determines if the system relaxes or not
	if relax_condition == 1 {
		relax() // finding minimum energy state
		saveas(m, "Initial_Relaxed_magnetization") //save magnetization state of magnnet after relaxtion
	}
	
	//////////////////////////////////// TABLE ADD DATA ////////////////////////////////////%%%%%%%%

//width_cross_section := cellsize_x
count_min := 0e-9
count_max := length_wire //
//print(count_max)
step_x := count_min 	//setting initial value
step_y := 0.0 	//setting initial value (for y direction starts at wire width out)
counter := 0 			//setting initial value




TableAdd(m.Region(mag_region_number1)) //calculating component of magnetization in a region (0=x,1=y,2=z)
TableAdd(B_ext)

//TableAdd(B_eff.Region(1)) //B_demag calculates the relaxed steady state magnetic field averaged over a given region
//TableAdd(B_demag.Region(1)) //B_demag calculates the relaxed steady state magnetic field averaged over a given region
//TableAdd(B_eff.Region(9)) //B_demag calculates the relaxed steady state magnetic field averaged over a given region
TableAddVar(step_x, "step_x", "No unit") //positions of the left edge of the region the magnetic field is avergaed over
TableAddVar(step_y, "step_y", "No unit")
TableAddVar(-(distance_above+zb/2), "distance_above", "No unit")



 	// adding all regions for chunks where magnetic field is avergaged over
	// prints data in txt file as all Bx fields, then all By and then all Bz. Thats wy there is two for loops
	
	for ppp := 0; ppp <= (2); ppp += 1 { // for three compenets
	
		for vvv := 5; vvv <= (225+5); vvv += 1 { // for number of regions in y strip
			//file := sprintf("mag%01d", vvv)
			TableAdd(B_eff.Comp(ppp).Region(vvv))
			///print(vvv)
		}
	}



//////////////////////////////////// Hysteresis calculation ////////////////////////////////////%%%%%%%%

counter222 :=0 //defining counter for hysteresis
Bmax_strong  := 900.0e-3
Bstep_strong := 10e-3 //5.0e-3
Bmax_win  := 900.0e-3 //window
Bstep_win :=  10.0e-3 //1e-3
MinimizerStop = 1e-6

often_save := 8 //how often we save during loop



HysteresisX_condition :=0
if HysteresisX_condition == 1 {




// from inisital state at 0 field to strong B-field (Pointing up along y)

for B:=0.0; B<=Bmax_strong; B+=Bstep_strong{
    B_ext = vector(B, 0, 0)
    minimize()   // small changes best minimized by minimize()
    tablesave()
		counter222 = counter222 + 1
			save_condition := remainder(counter222, often_save) //after num loops the if statement will act (uses when remainder is 0
		if save_condition == 0 {
			save(m)
		}
		print(100*B/Bmax_strong) //precent complete
}
print("Strong sweep step 1 complete")

// from strong B-field to +ve side of window of B i want to use
counter222 =0
for B:=Bmax_strong; B>=Bmax_win; B-=Bstep_strong{
    B_ext = vector(B, 0, 0)
    minimize()   // small changes best minimized by minimize()
    tablesave()
		counter222 = counter222 + 1
			save_condition := remainder(counter222, often_save) //after num loops the if statement will act (uses when remainder is 0
		if save_condition == 0 {
			save(m)
		}
}
print("Strong sweep step 2 complete")

////////////// inside B window now
// from strong Bwin_max to window of B i want to use
counter222 =0
for B:=Bmax_win; B>=-Bmax_win; B-=Bstep_win{
    B_ext = vector(B, 0, 0)
    minimize()   // small changes best minimized by minimize()
    tablesave()
	
	counter222 = counter222 + 1
			save_condition := remainder(counter222, often_save) //after num loops the if statement will act (uses when remainder is 0
		if save_condition == 0 {
			save(m)
			print(100*counter222/(2*Bmax_win/(Bstep_win))) //precent complete
		}
	
}
print("B window sweep step 1 complete")
counter222 =0
for B:=-Bmax_win; B<=Bmax_win; B+=Bstep_win{ // going from negative value back to zero where it finishes
    B_ext = vector(B, 0, 0)
    minimize()   // small changes best minimized by minimize()
    //tablesave()
	
	counter222 = counter222 + 1
			save_condition := remainder(counter222, often_save) //after num loops the if statement will act (uses when remainder is 0
		if save_condition == 0 {
			save(m)
			print(100*counter222/(Bmax_win/(Bstep_win))) //precent complete
		}
	
}
print("B window sweep step 2 complete")

} // Hystersis_X if loop done




		////////////////////////// sets up magnets in x direction and then puts on y field
	HysteresisY_condition :=0
if HysteresisY_condition == 1 {


// changing to y direction field
counter222 =0
for B:=0.0; B>=-Bmax_strong; B+=-Bstep_strong{ // going from negative value back to zero where it finishes
    B_ext = vector(0, B, 0)
	
	if relax_condition == 1 {
    minimize()   // small changes best minimized by minimize()
	}
    tablesave()
	
	counter222 = counter222 + 1
			save_condition := remainder(counter222, often_save) //after num loops the if statement will act (uses when remainder is 0
		if save_condition == 0 {
			save(m)
			print(100*counter222/(Bmax_win/(Bstep_win))) //precent complete
		}
	
}
print("B window y direction sweep step 1 complete")
counter222 =0
for B:=-Bmax_strong; B<=0.0; B+=Bstep_strong{ // going from negative value back to zero where it finishes
    B_ext = vector(0, B, 0)
	
	if relax_condition == 1 {
    minimize()   // small changes best minimized by minimize()
	}
    tablesave()
	
	counter222 = counter222 + 1
			save_condition := remainder(counter222, often_save) //after num loops the if statement will act (uses when remainder is 0
		if save_condition == 0 {
			save(m)
			print(100*counter222/(Bmax_win/(Bstep_win))) //precent complete
		}
	
}
print("B window y direction sweep step 2 complete")


counter222 =0
for B:=0.0; B<=Bmax_win; B+=Bstep_win{ // going from negative value back to zero where it finishes
    B_ext = vector(0, B, 0)
	
	if relax_condition == 1 {
    minimize()   // small changes best minimized by minimize()
	}
    tablesave()
	
	counter222 = counter222 + 1
			save_condition := remainder(counter222, often_save) //after num loops the if statement will act (uses when remainder is 0
		if save_condition == 0 {
			save(m)
			print(100*counter222/(Bmax_win/(Bstep_win))) //precent complete
		}
	
}
///////////
counter222 =0
for B:=Bmax_win; B>=0.0; B+=-Bstep_win{ // going from negative value back to zero where it finishes
    B_ext = vector(0, B, 0)
	
	if relax_condition == 1 {
    minimize()   // small changes best minimized by minimize()
	}
    tablesave()
	
	counter222 = counter222 + 1
			save_condition := remainder(counter222, often_save) //after num loops the if statement will act (uses when remainder is 0
		if save_condition == 0 {
			save(m)
			print(100*counter222/(Bmax_win/(Bstep_win))) //precent complete
		}
	
}

} // Hystersis_Y if loop



	if relax_condition == 1 {
		relax() // finding minimum energy state
		saveas(m, "Final_Relaxed_magnetization") //save magnetization state of magnnet after relaxtion
	}







//////////////////////////////////// calculating DEMAGNETIZATION FIELD ////////////////////////////////////%%%%%%%%

			///////////////////////// Area to calculate field ////////////////////////

						
						
	    //Bmax  := 0
        //B_ext = External_Field_vector
		 B_ext = vector(0, 0, 0)
		
		save(B_eff)
	save(B_eff.Comp(0))
	save(B_eff.Comp(1))
	save(B_eff.Comp(2))
	
	//mag13 := Cuboid(xb, yb, zb).rotz(0*pi/180).Transl(0, 000e-9, distance_above)
	
			mag15 := Cuboid(2.2*xb, 1.5*yb, 2*zb).Transl(0, 0, 0)
	DefRegion(7, mag15.sub(mag13)) /// averaging dmag field over region for mumax to convert
	save(B_eff.Region(7))
	save(B_eff.Comp(0).Region(7))
	save(B_eff.Comp(1).Region(7))
	save(B_eff.Comp(2).Region(7))
	B_eff.Average()
	
	
					
		FieldMeasure_condition :=0
	if FieldMeasure_condition == 1 {
	
print(cellsize_x)



xmin := -xb/2 -100e-9 //as the 0 of the wire is defined in the middle of the simulation box
xmax := xb/2 +100e-9

ymin := -yb/2 -150e-9
ymax := yb/2 +150e-9

num_x_points := 15
num_y_points := 15 // capped by number of regions we can have. which is 256

measure_volume_x := (xmax - xmin)/num_x_points
measure_volume_y := (ymax - ymin)/num_y_points
print(measure_volume_x)
print(measure_volume_y)
measure_volume_z := 10e-9 




//zzz is going 0,10,20, or steps of cellsize x. We avergae magnetic field over cellsize x chunks
// wire is broken up into number of points such that the size of each chunk is always a little bit smaller than cellsize_x. It starts and ends at start and end of wire
	//points_TOP_wire := ceil(xb/measure_volume_x)	// number of points leg wire is broken up into. Round up so chunk we average over is always a little bit smaller
	//print(points_TOP_wire)

	//TableAdd(B_eff.Region(4))
	//TableAdd(B_eff.Comp(0).Region(4))
	//TableAdd(B_eff.Comp(1).Region(4))
	//TableAdd(B_eff.Comp(2).Region(4))
	//TableAdd(B_demag)

		
		//B_ext = vector(0, 0, 0.1)
	
	
		mag15 := Cuboid(5.2*xb, 1.5*yb, 15e-9).Transl(0, 0, 0)
	DefRegion(2, mag15) /// averaging dmag field over region for mumax to convert
	save(B_eff.Region(2))
	save(B_eff.Comp(0).Region(2))
	save(B_eff.Comp(1).Region(2))
	save(B_eff.Comp(2).Region(2))
			

	
for xxx:=0; xxx<=(num_x_points-1); xxx++{ //xxx goes from 0 to points_TOP_wire -1 because it has a width so we dont need to move the averaging chunk points_TOP_wire time
        step_x = measure_volume_x*xxx //converts our index for loop to width we need for each section
		
		//print(xxx)
		//print(100*xxx/count_max) //precent complete
		
		
		x_trans_measure := xmin + measure_volume_x/2 + step_x  // xpostion for strip
		
		
		for yyy:=0; yyy<=(num_y_points-1); yyy++{
		
		//print(yyy)
		step_y = measure_volume_y*yyy
		counter = counter + 1 //countig how many loops we have ran
		
		y_trans_measure := ymin + measure_volume_y/2 + step_y
		measure_volume := Cuboid(measure_volume_x, measure_volume_y, measure_volume_z).Transl(x_trans_measure, y_trans_measure, 0)
		
		DefRegion(counter+5, measure_volume) // define regions in strips along y to find dmag field over
		
		
		
		save_condition := remainder(counter, 13) //after num loops the if statement will act (uses when remainder is 0
		if save_condition == 0 {
			save(regions)
		}
		
		
		//print(counter)
		
}
 

	
	


        //minimize()  
        //tablesave()
        //save(m)
       
		print(100*counter/(num_x_points*num_y_points))
}
	
	
	print(measure_volume_y)

			}

	tablesave() //saving strip of B_demag at once
	

//print(counter)

Time_elapsed := since(start).Seconds() //stopping timer
// Floor to get number of minutes from seconds and remainder finds number of seconds after the minute
print("Running time of", Floor(Time_elapsed/60), "minutes and ", remainder(Time_elapsed, 60), "seconds" )
//print(Time_elapsed)
// if it goes above half way (30 seconds) then it displays a neagtive number for some reason

print(cellsize_x)
print(cellsize_y)
print(cellsize_z)
